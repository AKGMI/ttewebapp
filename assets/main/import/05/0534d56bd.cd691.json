[1,["33A5ScnyVL37pFn4I8qbXo@f9941","18NKnD2+RORa7hIURwJo6m","4adGJa2BJAspuTzAtHAtzC","b7hkdYMbJFYZgTbiExc2CF@f9941","ffuIqPr2JI9I8dPLYGRDpD@f9941","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","dagKJ9l2tDT7zqb/lhWHps@f9941","c59dffR/5No62e0yyMwjv2@f9941","f8gAIrHuFJBoKaf+kLZxlb@f9941","25nfK4LdlOZ6ztWRoQj7dQ@f9941","72aOLDR6VMGLrjHm4NDafT@f9941","9dPvZImtxKg5pvootyd3gt@f9941","dby0I2JohIg4cPPALz/DeW@f9941","4ez/J85Z5JN5dvbDvZIf1L@f9941","99GufIjMFH3bIZDIIlGEPG@b47c0","afxHkx8GZGsJC+n+YfITQo@f9941","01LX9NCVBMlInvKnFCVW1H@6c48a","05mxby0d1H8LFpQBlPWO9q@6c48a","0a6tJVnx1AZL18bobYldmS@6c48a","1aRLNySCBBa7PGX2KiwFO7@6c48a","25nfK4LdlOZ6ztWRoQj7dQ@6c48a","2e7WbxmXhJkbjUZX3SzSLM@6c48a","4ez/J85Z5JN5dvbDvZIf1L@6c48a","5204XuY3lFV6cagxkYVuHK@6c48a","5204XuY3lFV6cagxkYVuHK@f9941","0a6tJVnx1AZL18bobYldmS@f9941","74zRn97OFKyLZxHz++6Ky7@f9941","a1RkZlX6xAzJwtbOjwxnc0@f9941","2e7WbxmXhJkbjUZX3SzSLM@f9941","cdqTWSt0FM+4RG8GoiMdvj@f9941","1aRLNySCBBa7PGX2KiwFO7@f9941","01LX9NCVBMlInvKnFCVW1H@f9941","05mxby0d1H8LFpQBlPWO9q@f9941","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","bbsbOtBPBJmYCRJXI6SyVO@b47c0","afqTYwkh1GSpWwGET8/k03","72aOLDR6VMGLrjHm4NDafT@6c48a","74zRn97OFKyLZxHz++6Ky7@6c48a","9dPvZImtxKg5pvootyd3gt@6c48a","a1RkZlX6xAzJwtbOjwxnc0@6c48a","63CMATfUlBYJUWVi3SBbSA","afxHkx8GZGsJC+n+YfITQo@6c48a","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","b7hkdYMbJFYZgTbiExc2CF@6c48a","c59dffR/5No62e0yyMwjv2@6c48a","cdqTWSt0FM+4RG8GoiMdvj@6c48a","dagKJ9l2tDT7zqb/lhWHps@6c48a","dby0I2JohIg4cPPALz/DeW@6c48a","ffuIqPr2JI9I8dPLYGRDpD@6c48a"],["node","_spriteFrame","_font","_textureSource","_parent","_userDefinedFont","_target","_scrollView","friendsButton","taskButton","_cameraComponent","messagesManager","energyManager","progressLine","inviteButton","fightButton","connectButton","scene","energyText","_envmapHDR","_envmapLDR","_diffuseMapHDR","_editableMaterial","environmentMap","_effectAsset"],[["cc.Widget",["_alignFlags","_top","_originalWidth","_originalHeight","_bottom","_left","_right","_alignMode","_horizontalCenter","_verticalCenter","_isAbsVerticalCenter","node"],-8,1],"cc.SpriteFrame","cc.ImageAsset",["cc.Node",["_name","_layer","_active","_id","_components","_parent","_lpos","_children","_lscale","_lrot","_euler"],-1,9,1,5,2,5,5,5],["cc.Sprite",["_sizeMode","_type","_fillRange","_enabled","_fillType","_fillStart","node","_spriteFrame","_color","_fillCenter"],-3,1,6,5,5],["cc.Label",["_string","_actualFontSize","_fontSize","_isSystemFontUsed","_lineHeight","_horizontalAlign","_outlineWidth","_shadowBlur","_overflow","_enableWrapText","_enableOutline","_enableShadow","node","_font","_outlineColor","_shadowColor","_shadowOffset"],-9,1,6,5,5,5],["cc.Button",["_transition","_interactable","node","_target","_pressedColor","_disabledColor","_normalColor","_hoverColor"],1,1,1,5,5,5,5],["cc.RichText",["_string","_fontSize","_isSystemFontUsed","_lineHeight","_verticalAlign","_maxWidth","_horizontalAlign","_enabled","node","_font","_userDefinedFont","_fontColor"],-5,1,6,6,5],["cc.Node",["_name","_layer","_active","_id","_components","_children","_lpos","_parent","_lscale"],-1,12,2,5,1,5],["cc.Layout",["_resizeMode","_layoutType","_isAlign","_spacingX","_paddingTop","_paddingBottom","_spacingY","_constraint","node","_cellSize"],-5,1,5],"cc.TextureCube",["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.Camera",["_orthoHeight","_clearFlags","_visibility","_projection","_priority","_far","_fov","node","_color"],-4,1,5],["cc.TTFFont",["_name","_native"],1],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_layer","_parent","_components","_lpos"],1,1,2,5],["67998ohBB1Dn7W/jeQca1NV",["_enabled","node"],2,1],["db4c4cjwXRIUKBzd02Yz/CX",["node","taskButton","friendsButton","tasksContent","friendsContent"],3,1,1,1,1,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Mask",["node"],3,1],["cc.Graphics",["node","_fillColor"],3,1,5],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","nestedPrefabInstanceRoots","targetOverrides"],-3],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_enabled","_distance","_shadowColor","_size"],1,5,5],["cc.SkyboxInfo",["_enabled","_rotationAngle","_envmapHDR","_envmapLDR","_diffuseMapHDR","_editableMaterial"],1,6,6,6,6],["cc.FogInfo",["_fogStart","_fogEnd","_fogColor"],1,5],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["79fbcuv28pCW7g1ULk8hLHS",["node","fightButton","inviteButton","stats","progressLine","energyManager","messagesManager"],3,1,1,1,1,1,1,1],["8f1c0mRQKZP6Y047ZSlJJpW",["node","connectButton"],3,1,1],["fb4ffoX8hpBW4z32XCZN2dO",["node","energyProgressNode"],3,1,1],["cc.ScrollBar",["_direction","node","_handle"],2,1,1],["cc.ScrollView",["bounceDuration","brake","horizontal","node","_content","_verticalScrollBar"],0,1,1,1],["fc8afFIiTdKbrHNUTii8ekJ",["node","timerLabel","energyLabel","continueButton","adRestoreButton","starRestoreButton","energyManager"],3,1,1,1,1,1,1,1],["3aaac3+gfdAgK5TmDJIe27R",["node","backgroundColor","emptyEnergyMessage"],3,1,1,1],["cc.DirectionalLight",["_colorTemperature","node","_color","_staticSettings"],2,1,5,4],["cc.StaticLightSettings",["_castShadow"],2],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_states","_defines","_props"],0,12]],[[11,0,1,1],[3,0,1,5,4,6,3],[11,0,1,2,1],[4,1,0,6,8,7,3],[4,0,6,7,2],[3,0,1,5,7,4,6,3],[3,0,1,5,4,3],[0,0,2,3,11,4],[0,0,1,11,3],[3,0,1,5,7,4,3],[3,0,2,1,5,4,6,4],[0,0,1,4,2,3,11,6],[0,0,4,11,3],[4,1,0,6,7,3],[3,0,2,1,5,7,4,6,4],[4,6,7,1],[6,1,2,2],[8,0,1,7,5,4,6,3],[3,0,1,7,4,6,3],[0,0,5,11,3],[5,0,5,1,2,3,12,13,6],[8,0,1,7,5,4,6,8,3],[8,0,1,7,4,6,3],[11,0,1],[0,0,6,1,11,4],[4,3,1,0,6,7,4],[6,0,2,2],[9,0,1,3,2,8,5],[7,3,0,1,2,8,9,10,5],[7,3,0,1,5,2,8,9,10,6],[7,3,0,1,2,8,5],[7,3,0,4,1,2,8,6],[5,0,1,2,4,3,10,6,11,7,12,14,15,16,13,10],[5,0,1,2,4,3,12,13,6],[3,0,5,4,6,8,2],[3,0,3,5,4,6,9,10,3],[8,0,1,7,4,3],[0,0,1,2,3,11,5],[0,0,5,6,1,4,2,3,11,8],[0,0,5,6,1,2,11,6],[0,0,3,7,11,4],[0,0,4,8,2,3,11,6],[4,6,1],[4,0,6,8,7,2],[4,1,0,6,3],[6,1,2,3,2],[6,0,2,6,4,5,3,2],[6,2,1],[6,0,2,7,4,5,2],[9,0,1,2,8,4],[9,0,1,4,5,6,7,2,8,9,8],[19,0,1],[20,0,1,1],[5,0,1,2,4,3,6,12,14,7],[5,0,1,2,4,8,9,3,12,13,8],[35,0,1,2,2],[36,0,1,2,3,4,5,4],[13,0,1,3],[14,0,2],[3,0,2,1,7,4,6,4],[3,0,1,3,7,4,6,4],[3,0,2,1,5,7,4,4],[3,0,2,1,5,4,4],[3,0,1,5,4,6,8,3],[3,0,1,5,4,8,3],[8,0,2,1,5,4,4],[8,0,1,5,4,6,8,3],[8,0,1,5,4,6,3],[8,0,3,7,4,3],[15,0,1,2,3,4,3],[0,0,11,2],[0,0,1,4,9,10,2,3,11,8],[0,0,5,6,2,3,11,6],[0,0,5,6,1,4,2,3,7,11,9],[0,0,5,1,4,3,11,6],[0,0,2,11,3],[0,0,4,2,11,4],[0,0,5,6,2,11,5],[0,0,8,11,3],[0,0,6,1,4,3,11,6],[0,0,1,4,3,11,5],[0,0,1,4,11,4],[4,1,4,5,2,6,8,9,7,5],[4,1,0,2,6,8,7,4],[4,0,6,2],[4,1,0,2,6,7,4],[6,0,2,4,5,3,2],[6,2,6,7,4,5,3,1],[6,0,2,6,7,4,5,3,2],[16,0,1,2],[9,0,1,8,3],[17,0,1,2,3,4,1],[18,0,1,1],[7,7,3,0,6,4,1,2,8,8],[7,0,1,5,2,8,9,10,5],[7,3,0,1,5,2,8,11,9,10,6],[7,3,0,1,2,8,11,5],[7,3,0,6,4,1,2,8,7],[21,0,1,2,3,2],[22,0,1,2,3,4,5,7],[23,0,1,2,3,4,5,6,7,1],[24,0,1,2,3,4,2],[25,0,1,2,3,3],[26,0,1,2,3,4,5,3],[27,0,1,2,3],[28,1],[29,1],[30,1],[31,1],[32,0,1,2,3,4,5,6,1],[33,0,1,1],[5,0,5,1,2,3,6,7,12,14,15,16,13,8],[5,0,1,2,3,12,13,5],[5,0,1,2,4,8,9,3,12,8],[5,0,5,1,2,4,3,12,13,7],[5,0,5,1,2,3,12,6],[34,0,1,1],[12,3,4,0,5,1,2,7,8,7],[12,6,0,1,2,7,5],[37,0,1,2,3,4,5,6,1],[38,0,1,2,1],[39,0,1,2,3,2],[40,0,2],[41,0,1,2,4],[42,0,1,2,3,4]],[[[{"name":"message_btn","rect":{"x":0,"y":0,"width":294,"height":144},"offset":{"x":0,"y":0},"originalSize":{"width":294,"height":144},"rotated":false,"capInsets":[130,0,148,0],"vertices":{"rawPosition":[-147,-72,0,147,-72,0,-147,72,0,147,72,0],"indexes":[0,1,2,2,1,3],"uv":[0,144,294,144,0,0,294,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-147,"y":-72,"z":0},"maxPos":{"x":147,"y":72,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[16]],[[{"name":"panel_","rect":{"x":0,"y":0,"width":180,"height":156},"offset":{"x":0,"y":0},"originalSize":{"width":180,"height":156},"rotated":false,"capInsets":[83,86,72,61],"vertices":{"rawPosition":[-90,-78,0,90,-78,0,-90,78,0,90,78,0],"indexes":[0,1,2,2,1,3],"uv":[0,156,180,156,0,0,180,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-90,"y":-78,"z":0},"maxPos":{"x":90,"y":78,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[17]],[[{"name":"crystal_icon","rect":{"x":1,"y":1,"width":85,"height":76},"offset":{"x":0.5,"y":-0.5},"originalSize":{"width":86,"height":77},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-42.5,-38,0,42.5,-38,0,-42.5,38,0,42.5,38,0],"indexes":[0,1,2,2,1,3],"uv":[1,76,86,76,1,0,86,0],"nuv":[0.011627906976744186,0,1,0,0.011627906976744186,0.987012987012987,1,0.987012987012987],"minPos":{"x":-42.5,"y":-38,"z":0},"maxPos":{"x":42.5,"y":38,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[18]],[[[57,"Inter_18pt-Black","Inter_18pt-Black.ttf"],-1],0,0,[],[],[]],[[{"name":"lootbox","rect":{"x":10,"y":5,"width":336,"height":205},"offset":{"x":2.5,"y":-1},"originalSize":{"width":351,"height":213},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-168,-102.5,0,168,-102.5,0,-168,102.5,0,168,102.5,0],"indexes":[0,1,2,2,1,3],"uv":[10,208,346,208,10,3,346,3],"nuv":[0.02849002849002849,0.014084507042253521,0.9857549857549858,0.014084507042253521,0.02849002849002849,0.9765258215962441,0.9857549857549858,0.9765258215962441],"minPos":{"x":-168,"y":-102.5,"z":0},"maxPos":{"x":168,"y":102.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[19]],[[{"name":"energy_icon","rect":{"x":0,"y":0,"width":39,"height":48},"offset":{"x":-0.5,"y":1},"originalSize":{"width":40,"height":50},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-19.5,-24,0,19.5,-24,0,-19.5,24,0,19.5,24,0],"indexes":[0,1,2,2,1,3],"uv":[0,50,39,50,0,2,39,2],"nuv":[0,0.04,0.975,0.04,0,1,0.975,1],"minPos":{"x":-19.5,"y":-24,"z":0},"maxPos":{"x":19.5,"y":24,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[20]],[[{"name":"nexus_rampage_poster","rect":{"x":0,"y":0,"width":682,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":682,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-341,-512,0,341,-512,0,-341,512,0,341,512,0],"indexes":[0,1,2,2,1,3],"uv":[0,1024,682,1024,0,0,682,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-341,"y":-512,"z":0},"maxPos":{"x":341,"y":512,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[21]],[[{"name":"enerrgy_icon","rect":{"x":0,"y":0,"width":81,"height":79},"offset":{"x":0,"y":0},"originalSize":{"width":81,"height":79},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40.5,-39.5,0,40.5,-39.5,0,-40.5,39.5,0,40.5,39.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,79,81,79,0,0,81,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40.5,"y":-39.5,"z":0},"maxPos":{"x":40.5,"y":39.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[22]],[[{"name":"default_btn","rect":{"x":0,"y":0,"width":420,"height":117},"offset":{"x":0,"y":0},"originalSize":{"width":420,"height":117},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-210,-58.5,0,210,-58.5,0,-210,58.5,0,210,58.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,117,420,117,0,0,420,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-210,"y":-58.5,"z":0},"maxPos":{"x":210,"y":58.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[23]],[[[58,"MainScreen"],[59,"FRENS_SCREEN",false,33554432,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12],[[0,-1,[5,1080,1449.9999999999998]],[37,45,470,8,8,-2]],[1,0,-235,0]],[14,"Info_panel",false,33554432,1,[-19,-20,-21,-22,-23],[[0,-13,[5,970,239.21399999999997]],[3,1,0,-14,[4,4291522844],34],[38,41,55,55,384.5944999999999,956,8,8,-15],[45,false,-17,-16],[89,false,-18]],[1,0,220.7985,0]],[18,"TASKS_SCREEN",33554432,[-26,-27,-28,-29,-30,-31,-32,-33],[[0,-24,[5,1080,1450]],[37,45,470,8,8,-25]],[1,0,-235,0]],[18,"Down_Panel",33554432,[-37,-38,-39,-40,-41,-42],[[0,-34,[5,1080,682.767]],[13,1,0,-35,84],[11,44,1407.1545,-62.09550000000013,399,505,-36]],[1,0,-680.7120000000001,0]],[18,"TabsPanel",33554432,[-52,-53],[[2,-43,[5,1080,114],[0,0.5,1]],[25,false,1,0,-44,50],[11,41,473,956,8,8,-45],[45,false,-47,-46],[49,2,1,true,-48],[91,-51,-50,-49,3,1]],[1,0,487,0]],[65,"Empty_energy",false,33554432,[-58,-59,-60,-61,-62],[[[0,-54,[5,1080,1920]],[3,1,0,-55,[4,4290723679],65],[7,45,8,8,-56],-57],4,4,4,1]],[60,"Canvas",33554432,"22kTEi4gNPRJygz7dEeMDv",[-67,-68,-69,-70],[[0,-63,[5,1080,1920]],[92,-65,-64],[70,45,-66]],[1,540,960,0]],[61,"EARN",false,33554432,7,[-73,1,3,5,-74],[[0,-71,[5,1080,1920]],[7,45,8,8,-72]]],[9,"Info_panel-001",33554432,2,[-79,-80,-81],[[0,-75,[5,970,239.21399999999997]],[3,1,0,-76,[4,4291522844],28],[7,45,8,239.21399999999997,-77],[16,false,-78]]],[9,"Info_panel-002",33554432,2,[-86,-87,-88],[[0,-82,[5,970,239.21399999999997]],[3,1,0,-83,[4,4291522844],33],[7,45,8,239.21399999999997,-84],[16,false,-85]]],[66,"wallet_btn",33554432,[-93,-94],[[[2,-89,[5,500.511,171.389],[0,0,0.5]],[3,1,0,-90,[4,4287897889],77],[39,9,45.827650999999975,39.363,180.76824899999997,85,-91],-92],4,4,4,1],[1,-494.17234900000005,734.842,0],[1,0.518,0.518,0.518]],[17,"Play_button",33554432,4,[-98,-99,-100],[[[0,-95,[5,885.556,162]],[13,1,0,-96,88],-97],4,4,1],[1,0,-115.35699999999986,0]],[9,"MainScreen",33554432,7,[-103,-104,4,11],[[0,-101,[5,1080,1920]],[7,45,100,100,-102]]],[17,"Freinds_list",33554432,1,[-109,-110],[[[0,-105,[5,1012,649.9479999999995]],[25,false,1,0,-106,10],-107,[38,45,34,34,390,410.05200000000025,793.9169999999999,1207.91,-108]],4,4,1,4],[1,0,10.026000000000124,0]],[5,"Button_invite",33554432,1,[-116],[[0,-111,[5,705,150]],[13,1,0,-112,16],[86,1,-114,[4,4291414473],[4,2281701375],-113],[12,4,90.97199999999992,-115]],[1,-92.461,-559.028,0]],[5,"Button_copy",33554432,1,[-122],[[0,-117,[5,150,150]],[3,1,0,-118,[4,4278221567],18],[46,1,-120,[4,4278221567],[4,4291414473],[4,2281701375],-119],[12,4,90.97199999999992,-121]],[1,351.719,-559.028,0]],[17,"TasksContent",33554432,3,[-127,-128],[[[0,-123,[5,1080,950]],[25,false,1,0,-124,42],-125,[11,45,300,200,793.9169999999999,1207.91,-126]],4,4,1,4],[1,0,-50,0]],[5,"friends",33554432,5,[-133],[[2,-129,[5,540,114],[0,0.5,1]],[3,1,0,-130,[4,4288293931],49],[87,-132,[4,4288293931],[4,4294967295],[4,2550136831],[4,4294967295],-131]],[1,270,0,0]],[14,"INFO",false,33554432,8,[-136,-137,-138,-139],[[0,-134,[5,1080,100]],[71,41,325,876,0.3,false,8,8,-135]],[1,0,584.9999999999999,0]],[18,"Title",33554432,[-144,-145],[[0,-140,[5,265.6499328613281,100]],[8,17,40.5,-141],[93,false,50,"RESTORE\nFULL",1,1,50,false,-142],[49,1,2,true,-143]],[1,0,89.5,0]],[9,"PlayerStats",33554432,13,[-148,-149,-150],[[0,-146,[5,1080,1920]],[7,45,100,100,-147]]],[14,"Background",false,33554432,8,[-154,-155],[[0,-151,[5,1080,1595.5769999999998]],[13,2,0,-152,2],[11,45,324.423,3.197442310920451e-14,192,192,-153]],[1,0,-162.2115,0]],[5,"Description",33554432,1,[-158,-159,-160],[[0,-156,[5,816,240]],[8,1,150,-157]],[1,0,454.9999999999999,0]],[21,"scrollBar",33554432,14,[-165],[[[2,-161,[5,12,649.9479999999995],[0,1,0.5]],[13,1,0,-162,9],[40,37,250,1,-163],-164],4,4,4,1],[1,506,0,0],[1,0,1,1]],[9,"view",33554432,14,[-170],[[0,-166,[5,1012,649.9479999999995]],[51,-167],[52,-168,[4,16777215]],[7,45,240,250,-169]]],[21,"scrollBar",33554432,17,[-175],[[[2,-171,[5,12,950],[0,1,0.5]],[13,1,0,-172,41],[40,37,250,1,-173],-174],4,4,4,1],[1,540,0,0],[1,0,1,1]],[9,"view",33554432,17,[-180],[[0,-176,[5,1080,950]],[51,-177],[52,-178,[4,16777215]],[7,45,240,250,-179]]],[14,"Message_error",false,33554432,3,[-184,-185],[[0,-181,[5,780,249]],[13,1,0,-182,45],[39,17,42,42,281.0270000000001,996,-183]],[1,0,319.4729999999999,0]],[5,"tasks",33554432,5,[-189],[[2,-186,[5,540,114],[0,0.5,1]],[3,1,0,-187,[4,4290132280],47],[47,-188]],[1,-270,0,0]],[5,"RestoreOptions",33554432,6,[-193,-194],[[0,-190,[5,696,350]],[12,4,438.215,-191],[27,1,1,24,true,-192]],[1,0,-346.7850000000001,0]],[5,"AdRestore",33554432,30,[-196,20,-197,-198],[[0,-195,[5,336,360]]],[1,-180,0,0]],[14,"Button",false,33554432,31,[-203],[[0,-199,[5,312,132]],[42,-200],[26,1,-201],[12,20,12,-202]],[1,0,-102,0]],[17,"Button",33554432,31,[-208],[[[0,-204,[5,312,132]],[4,0,-205,60],-206,[12,20,12,-207]],4,4,1,4],[1,0,-102,0]],[67,"Button",33554432,[-213],[[[0,-209,[5,312,132]],[4,0,-210,63],-211,[12,20,12,-212]],4,4,1,4],[1,0,-102,0]],[5,"energy",33554432,21,[-216,-217,-218],[[0,-214,[5,85,76]],[24,33,39.363,296.87800000000004,-215]],[1,458.137,625.122,0]],[9,"background_color",33554432,13,[-222,-223],[[0,-219,[5,1280,1920]],[4,0,-220,74],[72,21,340.5,340.5,399,505,-221]]],[17,"earn_button",33554432,4,[-228],[[[0,-224,[5,916.274,144]],[13,1,0,-225,83],-226,[12,20,711.2105,-227]],4,4,1,4],[1,0,441.827,0]],[98,"MainScreen",[-229,-230,-231,7],[99,null,null,"a202cd20-73dc-4fb4-8a4e-b667cd5aea16",null,null,[]],[100,[101,0.8,[2,0.365754,0.568107,0.908079,0.520833125],[2,0.455624,0.403274,0.370948,0],[2,0.452588,0.607642,0.755699,0.8],[2,0.618555,0.577848,0.544564,0]],[102,true,1,[4,4278190080],[0,256,256]],[103,true,190,89,90,91,92],[104,80.91,100,[4,4287439360]],[105],[106],[107],[108]]],[68,"_Manager_","864PzOWPpAVI+vtwU1LTmE",38,[[[109,-237,-236,-235,21,-234,-233,-232],-238,-239,[110,-241,-240]],4,1,1,4]],[1,"BackgroundColor",33554432,1,[[0,-242,[5,1080,1335.783]],[3,1,0,-243,[4,4290132280],3],[11,45,114.21699999999989,-2.1316282072803006e-14,8,8,-244],[16,false,-245]],[1,0,-57.108499999999935,0]],[10,"BackgroundTopPanel",false,33554432,1,[[0,-246,[5,1080,200]],[3,1,0,-247,[4,4290132280],4],[11,41,-1.8684999999999974,956,8,8,-248],[16,false,-249]],[1,0,640.9435000000001,0]],[1,"content",33554432,25,[[2,-250,[5,1012,166],[0,0.5,1]],[41,45,483.9479999999995,27.046999999999997,862.472,400,-251],[50,1,2,50,150,34,2,true,-252,[5,360,400]]],[1,0,324.97399999999976,0]],[1,"BackgroundColor",33554432,3,[[0,-253,[5,1080,1335.848]],[3,1,0,-254,[4,4290132280],35],[11,45,114.15200000000002,2.1316282072803006e-14,8,8,-255],[16,false,-256]],[1,0,-57.07600000000002,0]],[10,"BackgroundTopPanel",false,33554432,3,[[0,-257,[5,1080,200]],[3,1,0,-258,[4,4289485324],36],[11,41,-1.8684999999999974,956,8,8,-259],[16,false,-260]],[1,0,699.6569999999999,0]],[5,"Description",33554432,3,[-263,-264],[[0,-261,[5,912,147]],[8,1,150,-262]],[1,0,501.5,0]],[1,"content",33554432,27,[[2,-265,[5,1080,56],[0,0.5,1]],[41,45,894,27.046999999999997,862.472,400,-266],[50,1,2,35,55,34,2,true,-267,[5,360,400]]],[1,0,475,0]],[6,"Background",33554432,19,[[0,-268,[5,980,111]],[3,1,0,-269,[4,4292954954],51],[73,45,50,50,-5.5,-5.5,250,87,1,-270],[47,-271]]],[9,"Messages",33554432,7,[-274,6],[[0,-272,[5,1080,1920]],[7,45,8,8,-273]]],[62,"BackgroundColor",false,33554432,48,[[0,-275,[5,1080,1920]],[3,1,0,-276,[4,2600468480],55],[7,45,8,8,-277]]],[21,"energy",33554432,6,[-281],[[[2,-278,[5,116.77734375,75.6],[0,0,0.5]],-279,[74,1,515.237,259.4,479.255,75.6,-280]],4,1,4],[1,-34.522,625,0],[1,2,2,2]],[9,"Label",33554432,33,[-284,-285],[[0,-282,[5,101.6953125,100]],[27,1,1,6,true,-283]]],[5,"StarsRestore",33554432,30,[-287,-288,34],[[0,-286,[5,336,360]]],[1,180,0,0]],[9,"Label",33554432,34,[-291,-292],[[0,-289,[5,101.6953125,100]],[27,1,1,6,true,-290]]],[5,"Button",33554432,6,[-295,-296],[[23,-293],[12,4,150,-294]],[1,0,-760,0]],[36,"Button",33554432,54,[[[0,-297,[5,420,120]],[3,1,0,-298,[4,184549375],64],-299],4,4,1]],[5,"crystal",33554432,21,[-303],[[0,-300,[5,85,76]],[15,-301,67],[24,33,39.363,184.57799999999997,-302]],[1,458.137,737.422,0]],[5,"ton",33554432,21,[-307],[[0,-304,[5,81,81]],[15,-305,69],[24,33,41.363,400.703,-306]],[1,458.137,518.797,0]],[63,"TopGradient",33554432,22,[[0,-308,[5,1080,1052]],[3,1,0,-309,[4,2583645477],0],[75,41,30,-310]],[1,0,271.7884999999999,0],[1,1,-1,1]],[1,"BottomGradient",33554432,22,[[0,-311,[5,1080,1052]],[3,1,0,-312,[4,2582509649],1],[76,44,-0.772000000000105,30,-313]],[1,0,-272.56050000000005,0]],[6,"Background",33554432,23,[[0,-314,[5,816,240]],[3,1,0,-315,[4,4288293931],5],[7,45,912,147,-316]]],[1,"Title",33554432,23,[[0,-317,[5,551.390625,66.48]],[32,"Бонусная программа:",48,48,48,false,true,3,true,0,-318,[4,4292954954],[4,4289606964],[0,0,-6],6],[8,1,15,-319]],[1,0,71.75999999999999,0]],[1,"Text",33554432,23,[[0,-320,[5,766,130.39999999999998]],[94,"• За каждого друга <color=#74FB14>+1 500 кристалов</color>\n• За каждого премиум друга <color=#74FB14>+3 000 кристалов</color>\n• <color=#0888FF>Лутбокс</color> за каждого друга открывшего <color=#0888FF>лутбокс</color>",30,766,false,-321,7,8],[8,17,90.00000000000001,-322]],[1,0,-35.2,0]],[10,"Friend_count_title",false,33554432,1,[[2,-323,[5,266.05810546875,79.38],[0,0,0.5]],[28,63,"0 FRENS",63,false,-324,11,12],[8,1,159.2564999999998,-325]],[1,-446.258,526.0535000000002,0]],[10,"main_message",false,33554432,1,[[2,-326,[5,948.66064453125,79.38],[0,0,0.5]],[28,63,"invite friends and get bonuses",63,false,-327,13,14],[8,1,241.5454999999999,-328]],[1,-446.258,443.7645,0]],[10,"Description-001",false,33554432,2,[[2,-329,[5,700,112.99999999999999],[0,0,0.5]],[29,50,"Open loot boxes and collect cards \nfor unlock new characters",42,700,false,-330,20,21],[19,8,48.16599999999998,-331]],[1,-436.834,-12.079499999999825,0]],[1,"Description-001",33554432,9,[[2,-332,[5,700,63],[0,0,0.5]],[29,50,"invite friends and get looboxes!",42,700,false,-333,24,25],[19,8,48.16599999999998,-334]],[1,-436.834,-12.079499999999825,0]],[1,"Description-001",33554432,10,[[2,-335,[5,700,112.99999999999999],[0,0,0.5]],[29,50,"invite friends \nand get coins bonus",42,700,false,-336,29,30],[19,8,48.16599999999998,-337]],[1,-436.834,-12.079499999999825,0]],[10,"RichText",false,33554432,3,[[0,-338,[5,142.58056640625,79.38]],[28,63,"TASKS",63,false,-339,37,38],[8,1,260,-340]],[1,0,498.0984999999999,0]],[6,"Background",33554432,45,[[0,-341,[5,912,147]],[3,1,0,-342,[4,4288293931],39],[7,45,912,147,-343]]],[1,"Text",33554432,28,[[0,-344,[5,500,228.2]],[95,70,"Task not completed try again",63,500,false,-345,[4,4278190335],43,44],[19,8,222.624,-346]],[1,82.624,-13.725,0]],[10,"AllTasksDone",false,33554432,3,[[0,-347,[5,311.279296875,63]],[96,50,"All tasks done",50,false,-348,[4,3439329279]],[8,1,439.207,-349]],[1,0,254.293,0]],[14,"Loading",false,33554432,3,[-352],[[23,-350],[8,1,445,-351]],[1,0,230,0]],[10,"exp_icon",false,33554432,19,[[0,-353,[5,10,10]],[15,-354,52],[77,10,740.016,53.5,81,-355]],[1,240.51599999999996,0,0]],[1,"Title",33554432,19,[[0,-356,[5,653.005859375,50.4]],[111,"Советы по эффективному заработку",0,34,34,false,3,0,-357,[4,4283734271],[4,4281693654],[0,0,-6],53],[78,18,-134.556,-358]],[1,-134.556,0,0]],[1,"Position",33554432,19,[[0,-359,[5,24.837890625,50.4]],[112,">",36,36,false,-360,54],[79,34,94.62400561523435,24.8,24.8,50.4,-361]],[1,436.088,0,0]],[1,"title",33554432,6,[[0,-362,[5,423.15625,80.64]],[53,"NOT ENERGY",64,64,64,false,5,-363,[4,4294967295]],[80,1,119.67999999999995,929.842,80.64,-364]],[1,0,800,0]],[36,"timer",33554432,6,[[[0,-365,[5,467.109375,151.2]],-366,[81,2,350,770.6220000000001,-367]],4,1,4]],[5,"Row",33554432,20,[-369,-370],[[0,-368,[5,300,50]]],[1,0,25,0]],[5,"Row",33554432,20,[-373],[[0,-371,[5,211.1572265625,50]],[90,1,1,-372]],[1,0,-25,0]],[1,"Title",33554432,52,[[0,-374,[5,240.7958984375,112.99999999999999]],[8,17,34,-375],[97,50,"RESTORE\nFULL",1,1,50,false,-376]],[1,0,89.5,0]],[64,"timer",33554432,35,[[0,-377,[5,162,162]],[82,3,2,0.25,0.4,-378,[4,4294932463],[0,0.5,0.5],70]],[1,0.543,0.543,0.543]],[1,"background_color-001",33554432,36,[[0,-379,[5,1280,641.6469999999999]],[43,0,-380,[4,4278190080],72],[11,41,-31.89850000000004,1446.8985,1280,505,-381]],[1,0,671.075,0]],[1,"background_color-002",33554432,36,[[0,-382,[5,1280,641.6469999999999]],[43,0,-383,[4,4278190080],73],[11,41,-31.89850000000004,1446.8985,1280,505,-384]],[1,0,671.075,0]],[34,"HealthBar",4,[[0,-385,[5,25,2]],[83,3,0,0.5,-386,[4,4278255391],81]],[1,-176.606,72.055,0],[1,15.833,7.916,7.916]],[22,"bar",33554432,24,[[[2,-387,[5,10,156.25],[0,0,0]],-388],4,1],[1,-11,-31.25,0]],[6,"Label",33554432,15,[[0,-389,[5,500,80]],[54,"invite friends",63,63,63,1,false,false,-390,15]]],[6,"Label",33554432,16,[[0,-391,[5,500,80]],[54,"copy\nlink",34,34,34,1,false,false,-392,17]]],[14,"Loading",false,33554432,1,[-394],[[23,-393]],[1,0,80.255,0]],[6,"Spinner",33554432,88,[[0,-395,[5,48,48]],[4,0,-396,19]]],[10,"Node",false,33554432,2,[[0,-397,[5,302.6871938325991,313.0295808656036]],[4,0,-398,22]],[1,330.602,-2.308499999999867,0]],[10,"Node-001",false,33554432,2,[[0,-399,[5,157.66687665198236,163.05412756264235]],[4,0,-400,23]],[1,330.602,1.0965000000001055,0]],[1,"Node",33554432,9,[[0,-401,[5,302.6871938325991,313.0295808656036]],[4,0,-402,26]],[1,330.602,-2.308499999999867,0]],[1,"Node-001",33554432,9,[[0,-403,[5,170,130]],[4,0,-404,27]],[1,330.602,1.0965000000001055,0]],[1,"Node",33554432,10,[[0,-405,[5,302.6871938325991,313.0295808656036]],[4,0,-406,31]],[1,330.602,-2.308499999999867,0]],[1,"Node-002",33554432,10,[[0,-407,[5,172,154]],[4,0,-408,32]],[1,330.602,3.7700000000001057,0]],[6,"Text",33554432,45,[[0,-409,[5,801.4892578125,97.8]],[33,"Выполняйте задачи чтобы заработать \nбольше кристаллов, за кристаллы можно покупать\nценные предметы в магазине.",30,30,30,false,-410,40]]],[22,"bar",33554432,26,[[[2,-411,[5,10,156.25],[0,0,0]],-412],4,1],[1,-11,-31.25,0]],[1,"Node",33554432,28,[[0,-413,[5,126,126]],[84,0,-414]],[1,-265.971,0,0]],[6,"Spinner",33554432,72,[[0,-415,[5,48,48]],[42,-416]]],[1,"Text",33554432,29,[[0,-417,[5,170.25,66.48]],[32,"TASKS",48,48,48,false,true,3,true,0,-418,[4,4292954954],[4,4289606964],[0,0,-6],46]],[1,0,-55,0]],[1,"Text",33554432,18,[[0,-419,[5,213.1640625,66.48]],[32,"FRIENDS",48,48,48,false,true,3,true,0,-420,[4,4292954954],[4,4289606964],[0,0,-6],48]],[1,0,-55,0]],[1,"energy_icon",33554432,50,[[0,-421,[5,71,84]],[4,0,-422,56]],[1,-59.431,0,0]],[6,"Background",33554432,31,[[0,-423,[5,336,360]],[4,0,-424,57]]],[1,"Text",33554432,78,[[0,-425,[5,57.0068359375,63]],[30,50,"+1",50,false,-426]],[1,-30,0,0]],[1,"Image",33554432,78,[[0,-427,[5,39,48]],[4,0,-428,58]],[1,31.324989318847656,0,0]],[6,"Text",33554432,79,[[0,-429,[5,211.1572265625,63]],[30,50,"ENERGY",50,false,-430]]],[6,"Label",33554432,32,[[0,-431,[5,221.51991271972656,60.480000000000004]],[30,48,"Watch AD",48,false,-432]]],[1,"Icon",33554432,51,[[0,-433,[5,69,66]],[4,0,-434,59]],[1,-16.34765625,0,0]],[1,"Text",33554432,51,[[0,-435,[5,26.6953125,60.480000000000004]],[31,48,"1",2,48,false,-436]],[1,37.5,0,0]],[6,"Background",33554432,52,[[0,-437,[5,336,360]],[4,0,-438,61]]],[1,"Icon",33554432,53,[[0,-439,[5,69,66]],[4,0,-440,62]],[1,-16.34765625,0,0]],[1,"Text",33554432,53,[[0,-441,[5,26.6953125,60.480000000000004]],[31,48,"5",2,48,false,-442]],[1,37.5,0,0]],[6,"Label",33554432,54,[[0,-443,[5,500,80]],[113,"OK",63,63,63,1,false,false,-444]]],[116,39,81],[22,"count_text",33554432,35,[[[2,-445,[5,141.044921875,50.4],[0,1,0.5]],-446],4,1],[1,-62.681,0,0]],[1,"count_text",33554432,56,[[2,-447,[5,96.787109375,50.4],[0,1,0.5]],[20,"100",2,55,55,false,-448,66]],[1,-62.681,0,0]],[1,"count_text",33554432,57,[[2,-449,[5,87.62939453125,50.4],[0,1,0.5]],[20,"0.0",2,55,55,false,-450,68]],[1,-62.681,0,0]],[6,"Sprite",33554432,35,[[0,-451,[5,81,79]],[15,-452,71]]],[1,"count_text",33554432,11,[[2,-453,[5,283.40576171875,50.4],[0,0,0.5]],[20,"connected",0,55,55,false,-454,75]],[1,174.227,2.469,0]],[1,"Sprite",33554432,11,[[0,-455,[5,86.928,76.062]],[4,0,-456,76]],[1,97.391,2.469,0]],[1,"Title",33554432,4,[[0,-457,[5,256.52178955078125,120.61999999999999]],[114,"FIGHT TO OPEN\nLOOTBOX WITH\nREWARDS",0,33.2,33.2,37,false,-458,78]],[1,-251.57,164.479,0]],[1,"Lootbox_Sprite",33554432,4,[[0,-459,[5,336,205]],[15,-460,79]],[1,213.899,146.325,0]],[34,"HealthBarBg",4,[[0,-461,[5,25,2]],[85,3,0,1,-462,80]],[1,-176.606,72.055,0],[1,15.833,7.916,7.916]],[1,"text",33554432,37,[[0,-463,[5,377.4365234375,90.39999999999999]],[20,"invite friends\nand complete missions",0,34,34,false,-464,82]],[1,-117.672,4.826,0]],[1,"text_title",33554432,12,[[0,-465,[5,210.68359375,88.2]],[33,"FIGHT",70,70,70,false,-466,85]],[1,-94.525,-2.447,0]],[1,"Sprite",33554432,12,[[0,-467,[5,81,79]],[15,-468,86]],[1,79.224,0,0]],[1,"text_price",33554432,12,[[0,-469,[5,29.53125,88.2]],[33,"1",70,70,70,false,-470,87]],[1,150.192,-2.447,0]],[48,1,12,[4,4294967295],[4,4290953922],[4,2550136831]],[69,"Camera",33554432,7,[-471],[1,0,0,1000]],[117,0,1073741824,960,2000,14,41943040,129,[4,4278190080]],[44,1,0,85],[55,1,24,131],[56,0.23,0.75,false,14,42,132],[44,1,0,97],[55,1,26,134],[56,0.23,0.75,false,17,46,135],[31,60,"<color=#FFE96B>0</color>/24",1,60,false,50],[53,"00:59:01",120,120,120,false,5,77,[4,4294967295]],[26,1,33],[26,1,34],[46,1,55,[4,184549375],[4,4291414473],[4,2281701375],55],[119,6,138,137,141,139,140,114],[115,"10/10",2,55,55,false,115],[88,1,11,[4,4287897889],[4,4287897889],[4,3681228824],[4,2224300321],11],[48,1,37,[4,4294967295],[4,3305111551],[4,2155641980]],[120,39,49,142],[35,"Main Light","c0y6F5f+pAvI805TdmxIjx",38,[[121,7700,-472,[4,4293982975],[122,true]]],[1,0.21,2.324,0.965],[3,0.23378973853128482,0.5172049647713675,0.7952850926062071,0.21298592453882648],[1,-117.367,190.727,35.493]],[35,"Main Camera","c9DMICJLFO5IeO07EPon7U",38,[[118,50,13,14,1083179008,-473]],[1,0,12.677,12.474],[3,-0.3428400494994482,0,0,0.9393937941349282],[1,-40.1,0,0]]],0,[0,0,1,0,0,1,0,-1,40,0,-2,41,0,-3,23,0,-4,14,0,-5,63,0,-6,64,0,-7,15,0,-8,16,0,-9,88,0,-10,2,0,0,2,0,0,2,0,0,2,0,6,2,0,0,2,0,0,2,0,-1,65,0,-2,90,0,-3,91,0,-4,9,0,-5,10,0,0,3,0,0,3,0,-1,43,0,-2,44,0,-3,68,0,-4,45,0,-5,17,0,-6,28,0,-7,71,0,-8,72,0,0,4,0,0,4,0,0,4,0,-1,121,0,-2,122,0,-3,123,0,-4,84,0,-5,12,0,-6,37,0,0,5,0,0,5,0,0,5,0,6,5,0,0,5,0,0,5,0,8,18,0,9,29,0,0,5,0,-1,29,0,-2,18,0,0,6,0,0,6,0,0,6,0,-4,142,0,-1,76,0,-2,50,0,-3,77,0,-4,30,0,-5,54,0,0,7,0,10,130,0,0,7,0,0,7,0,-1,129,0,-2,13,0,-3,8,0,-4,48,0,0,8,0,0,8,0,-1,22,0,-5,19,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,66,0,-2,92,0,-3,93,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,67,0,-2,94,0,-3,95,0,0,11,0,0,11,0,0,11,0,-4,144,0,-1,119,0,-2,120,0,0,12,0,0,12,0,-3,128,0,-1,125,0,-2,126,0,-3,127,0,0,13,0,0,13,0,-1,36,0,-2,21,0,0,14,0,0,14,0,-3,133,0,0,14,0,-1,24,0,-2,25,0,0,15,0,0,15,0,6,15,0,0,15,0,0,15,0,-1,86,0,0,16,0,0,16,0,6,16,0,0,16,0,0,16,0,-1,87,0,0,17,0,0,17,0,-3,136,0,0,17,0,-1,26,0,-2,27,0,0,18,0,0,18,0,6,18,0,0,18,0,-1,101,0,0,19,0,0,19,0,-1,47,0,-2,73,0,-3,74,0,-4,75,0,0,20,0,0,20,0,0,20,0,0,20,0,-1,78,0,-2,79,0,0,21,0,0,21,0,-1,56,0,-2,35,0,-3,57,0,0,22,0,0,22,0,0,22,0,-1,58,0,-2,59,0,0,23,0,0,23,0,-1,60,0,-2,61,0,-3,62,0,0,24,0,0,24,0,0,24,0,-4,132,0,-1,85,0,0,25,0,0,25,0,0,25,0,0,25,0,-1,42,0,0,26,0,0,26,0,0,26,0,-4,135,0,-1,97,0,0,27,0,0,27,0,0,27,0,0,27,0,-1,46,0,0,28,0,0,28,0,0,28,0,-1,70,0,-2,98,0,0,29,0,0,29,0,0,29,0,-1,100,0,0,30,0,0,30,0,0,30,0,-1,31,0,-2,52,0,0,31,0,-1,103,0,-3,32,0,-4,33,0,0,32,0,0,32,0,0,32,0,0,32,0,-1,107,0,0,33,0,0,33,0,-3,139,0,0,33,0,-1,51,0,0,34,0,0,34,0,-3,140,0,0,34,0,-1,53,0,0,35,0,0,35,0,-1,115,0,-2,81,0,-3,118,0,0,36,0,0,36,0,0,36,0,-1,82,0,-2,83,0,0,37,0,0,37,0,-3,145,0,0,37,0,-1,124,0,-1,39,0,-2,147,0,-3,148,0,11,146,0,12,114,0,13,84,0,14,145,0,15,128,0,0,39,0,-2,114,0,-3,146,0,16,144,0,0,39,0,0,40,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,-1,69,0,-2,96,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,-1,49,0,0,49,0,0,49,0,0,49,0,0,50,0,-2,137,0,0,50,0,-1,102,0,0,51,0,0,51,0,-1,108,0,-2,109,0,0,52,0,-1,110,0,-2,80,0,0,53,0,0,53,0,-1,111,0,-2,112,0,0,54,0,0,54,0,-1,113,0,-2,55,0,0,55,0,0,55,0,-3,141,0,0,56,0,0,56,0,0,56,0,-1,116,0,0,57,0,0,57,0,0,57,0,-1,117,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,-1,99,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,77,0,-2,138,0,0,77,0,0,78,0,-1,104,0,-2,105,0,0,79,0,0,79,0,-1,106,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,-2,131,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,-1,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,-2,134,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,115,0,-2,143,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,-1,130,0,0,147,0,0,148,0,17,38,1,4,8,3,4,8,4,4,13,5,4,8,6,4,48,7,4,38,11,4,13,20,4,31,34,4,52,114,18,143,132,7,133,135,7,136,473],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,134,143],[1,1,1,1,1,1,2,2,5,1,1,2,5,2,5,2,1,2,1,1,2,5,1,1,2,5,1,1,1,2,5,1,1,1,1,1,1,2,5,1,2,1,1,2,5,1,2,1,2,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,2,1,19,20,21,22,1,1,2],[3,3,0,0,0,0,1,1,1,4,5,1,1,1,1,1,6,1,7,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,4,5,1,1,0,1,0,1,0,0,0,0,1,1,8,9,10,9,11,12,10,11,12,24,8,2,25,2,26,27,13,3,3,28,2,29,7,2,30,0,0,2,31,32,2,13,2,6,14,33,34,35,15,15,2]],[[[123,"advanced/sky",[{"hash":3931745948,"name":"advanced/sky|sky-vs|sky-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"params","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"environmentMap","type":31,"count":1,"stageFlags":16,"binding":1,"defines":[]},{"name":"blendEnvironmentMap","type":31,"count":1,"stageFlags":16,"binding":2,"defines":["BLEND_ENV_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":[]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"location":8,"defines":["CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"location":9,"defines":[]},{"name":"a_matWorld1","format":44,"location":10,"defines":[]},{"name":"a_matWorld2","format":44,"location":11,"defines":[]},{"name":"a_lightingMapUVParam","format":44,"location":12,"defines":["CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"location":13,"defines":[]},{"name":"a_reflectionProbeData","format":44,"location":14,"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"location":15,"defines":["CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"location":16,"defines":["CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"location":17,"defines":["CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":18,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightBoundingSizeVS","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeBlendCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"params","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"environmentMap","type":31,"count":1,"stageFlags":16,"binding":1,"defines":[]},{"name":"blendEnvironmentMap","type":31,"count":1,"stageFlags":16,"binding":2,"defines":["BLEND_ENV_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#define CC_USE_SURFACE_SHADER 1\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nout highp vec3 v_worldPos;\nout vec4 v_normal;\nout vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  out lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  out mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  out mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_REFLECTION_PROBE && 0\n  out mediump vec4 v_reflectionProbeData;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  out mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  out highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  out highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    #define VSOutput_reflectionProbeBlendId v_shadowBiasAndProbeId.w\n  #endif\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      #else\n      #endif\n    #else\n    #endif\n  #endif\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\nlayout(std140) uniform Constants {\n  vec4 params;\n};\n#define CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return cc_cameraPos.xyz + In.worldPos * params.w;\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHADOW_BIAS\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    VSOutput_reflectionProbeBlendId = In.shadowBiasAndProbeId.w;\n  #endif\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n}\nvec4 CalcSkyClipPos(vec3 viewDir)\n{\n    vec4 clipPos;\n    mat4 matViewRotOnly = mat4(mat3(cc_matView));\n    vec4 pos = matViewRotOnly * vec4(viewDir, 1.0);\n    if (cc_matProj[3].w > 0.0) {\n        mat4 matProj = cc_matProj;\n        matProj[0].x = 5.2;\n        matProj[1].y = 2.6;\n        matProj[2].zw = vec2(-1.0);\n        matProj[3].zw = vec2(0.0);\n        clipPos = matProj * pos;\n    }\n    else {\n        clipPos = cc_matProj * pos;\n    }\n    clipPos.z = 0.99999 * clipPos.w;\n    return clipPos;\n}\nvoid main()\n{\n    SurfacesStandardVertexIntermediate In;\n    CCSurfacesVertexInput(In);\n    In.worldPos = In.position.xyz;\n    In.worldPos = SurfacesVertexModifyWorldPos(In);\n    In.clipPos = CalcSkyClipPos(In.position.xyz);\n    In.worldNormal.w = 1.0;\n    In.worldNormal.xyz = normalize(In.position.xyz);\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    In.fogFactor = 0.0;\n#endif\n    CCSurfacesVertexOutput(In);\n}","frag":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#define CC_USE_SURFACE_SHADER 1\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nin highp vec3 v_worldPos;\nin vec4 v_normal;\nin vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  in mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_REFLECTION_PROBE && 0\n  in mediump vec4 v_reflectionProbeData;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  in mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  in highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  in highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(1.0, 1.0, 1.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    #define FSInput_reflectionProbeBlendId v_shadowBiasAndProbeId.w\n  #endif\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n      vec4 cc_lightBoundingSizeVS[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n    layout(std140) uniform CCSH {\n      vec4 cc_sh_linear_const_r;\n      vec4 cc_sh_linear_const_g;\n      vec4 cc_sh_linear_const_b;\n      vec4 cc_sh_quadratic_r;\n      vec4 cc_sh_quadratic_g;\n      vec4 cc_sh_quadratic_b;\n      vec4 cc_sh_quadratic_a;\n    };\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n  uniform samplerCube cc_reflectionProbeBlendCubemap;\n#endif\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 HDRToLDR(vec3 color)\n{\n  #if CC_USE_HDR\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n    #endif\n    {\n    #if CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    }\n  #endif\n  return color;\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvec3 RotationVecFromAxisY(vec3 v, float rotateAngleArc)\n{\n  return RotationVecFromAxisY(v, cos(rotateAngleArc), sin(rotateAngleArc));\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\nlayout(std140) uniform Constants {\n  vec4 params;\n};\nuniform samplerCube environmentMap;\n#if BLEND_ENV_MAP\n  uniform samplerCube blendEnvironmentMap;\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec3 sampleEnvMap(samplerCube tex, vec3 R)\n{\n  vec3 c = vec3(1.0);\n  #if USE_RGBE_CUBEMAP\n    c *= unpackRGBE(fragTextureLod(tex, R, 0.0));\n  #else\n    c *= SRGBToLinear(fragTextureLod(tex, R, 0.0).rgb);\n  #endif\n  return c;\n}\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n  vec3 c = vec3(1.0);\n  vec3 normal = normalize(FSInput_worldNormal);\n  vec3 rotationDir = RotationVecFromAxisY(normal.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n  c = sampleEnvMap(environmentMap, rotationDir);\n  #if BLEND_ENV_MAP\n    c = mix(c, sampleEnvMap(blendEnvironmentMap, rotationDir), params.x);\n  #endif\n  return vec4(c * cc_ambientSky.w * params.y, 1.0);\n}\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n\treturn vec4(cc_ambientSky.xyz * cc_ambientSky.w, 1.0);\n}\n#endif\nlayout(location = 0) out vec4 fragColorX;\nvoid main() {\n  vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  color.a = 1.0;\n  #if CC_USE_FOG != 4\n    float fogFactor = 1.0;\n    CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n    CC_APPLY_FOG_BASE(color, fogFactor);\n  #endif\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #else\n    color.rgb = HDRToLDR(color.rgb);\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  fragColorX = color;\n}"},"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nvarying highp vec3 v_worldPos;\nvarying vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_REFLECTION_PROBE && 0\n  varying mediump vec4 v_reflectionProbeData;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    #define VSOutput_reflectionProbeBlendId v_shadowBiasAndProbeId.w\n  #endif\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n#if CC_USE_MORPH\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp sampler2D cc_jointTexture;\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      #else\n      #endif\n    #else\n    #endif\n  #endif\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\n    uniform vec4 params;\n#define CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return cc_cameraPos.xyz + In.worldPos * params.w;\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHADOW_BIAS\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    VSOutput_reflectionProbeBlendId = In.shadowBiasAndProbeId.w;\n  #endif\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n}\nvec4 CalcSkyClipPos(vec3 viewDir)\n{\n    vec4 clipPos;\n    mat4 matViewRotOnly = mat4(mat3(cc_matView));\n    vec4 pos = matViewRotOnly * vec4(viewDir, 1.0);\n    if (cc_matProj[3].w > 0.0) {\n        mat4 matProj = cc_matProj;\n        matProj[0].x = 5.2;\n        matProj[1].y = 2.6;\n        matProj[2].zw = vec2(-1.0);\n        matProj[3].zw = vec2(0.0);\n        clipPos = matProj * pos;\n    }\n    else {\n        clipPos = cc_matProj * pos;\n    }\n    clipPos.z = 0.99999 * clipPos.w;\n    return clipPos;\n}\nvoid main()\n{\n    SurfacesStandardVertexIntermediate In;\n    CCSurfacesVertexInput(In);\n    In.worldPos = In.position.xyz;\n    In.worldPos = SurfacesVertexModifyWorldPos(In);\n    In.clipPos = CalcSkyClipPos(In.position.xyz);\n    In.worldNormal.w = 1.0;\n    In.worldNormal.xyz = normalize(In.position.xyz);\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    In.fogFactor = 0.0;\n#endif\n    CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#define CC_USE_SURFACE_SHADER 1\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nvarying highp vec3 v_worldPos;\nvarying vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_REFLECTION_PROBE && 0\n  varying mediump vec4 v_reflectionProbeData;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(1.0, 1.0, 1.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    #define FSInput_reflectionProbeBlendId v_shadowBiasAndProbeId.w\n  #endif\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform mediump vec4 cc_debug_view_mode;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n#endif\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n  uniform samplerCube cc_reflectionProbeBlendCubemap;\n#endif\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 HDRToLDR(vec3 color)\n{\n  #if CC_USE_HDR\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n    #endif\n    {\n    #if CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    }\n  #endif\n  return color;\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvec3 RotationVecFromAxisY(vec3 v, float rotateAngleArc)\n{\n  return RotationVecFromAxisY(v, cos(rotateAngleArc), sin(rotateAngleArc));\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n    uniform vec4 params;\nuniform samplerCube environmentMap;\n#if BLEND_ENV_MAP\n  uniform samplerCube blendEnvironmentMap;\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec3 sampleEnvMap(samplerCube tex, vec3 R)\n{\n  vec3 c = vec3(1.0);\n  #if USE_RGBE_CUBEMAP\n    c *= unpackRGBE(fragTextureLod(tex, R, 0.0));\n  #else\n    c *= SRGBToLinear(fragTextureLod(tex, R, 0.0).rgb);\n  #endif\n  return c;\n}\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n  vec3 c = vec3(1.0);\n  vec3 normal = normalize(FSInput_worldNormal);\n  vec3 rotationDir = RotationVecFromAxisY(normal.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n  c = sampleEnvMap(environmentMap, rotationDir);\n  #if BLEND_ENV_MAP\n    c = mix(c, sampleEnvMap(blendEnvironmentMap, rotationDir), params.x);\n  #endif\n  return vec4(c * cc_ambientSky.w * params.y, 1.0);\n}\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n\treturn vec4(cc_ambientSky.xyz * cc_ambientSky.w, 1.0);\n}\n#endif\nvoid main() {\n  vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  color.a = 1.0;\n  #if CC_USE_FOG != 4\n    float fogFactor = 1.0;\n    CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n    CC_APPLY_FOG_BASE(color, fogFactor);\n  #endif\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #else\n    color.rgb = HDRToLDR(color.rgb);\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  gl_FragColor = color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeBlendCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":91,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":121}},"defines":[{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"number","range":[0,3]},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SURFACES_TRANSFER_CLIP_POS","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_ENABLE_CLUSTERED_LIGHT_CULLING","type":"number","range":[0,3]},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"CC_TONE_MAPPING_TYPE","type":"number","range":[0,3]},{"name":"HDR_TONE_MAPPING_ACES","type":"boolean"},{"name":"BLEND_ENV_MAP","type":"boolean"},{"name":"USE_RGBE_CUBEMAP","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"advanced/sky|sky-vs|sky-fs","priority":245,"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"environmentMap":{"value":"grey","type":31},"positionScaling":{"type":13,"value":[1],"handleInfo":["params",3,13]},"blendEnvironmentMap":{"value":"grey","type":31},"blendWeight":{"type":13,"value":[0],"handleInfo":["params",0,13]},"brightMultiplier":{"type":13,"value":[1],"handleInfo":["params",1,13]},"params":{"type":16,"value":[0,1,0,1]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"advanced/sky|sky-vs|sky-fs","priority":245,"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":true,"depthWrite":false}}]}]]],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@e9a6d","back":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@40c10","left":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@8fd34","right":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@74afd","top":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@bb97f","bottom":"6fAc9/gb9Kfr1dCvwZaWSA@b47c0@7d38f"}]}],[10],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"name":"default_wrapper","rect":{"x":0,"y":0,"width":336,"height":360},"offset":{"x":0,"y":0},"originalSize":{"width":336,"height":360},"rotated":false,"capInsets":[50,50,50,50],"vertices":{"rawPosition":[-168,-180,0,168,-180,0,-168,180,0,168,180,0],"indexes":[0,1,2,2,1,3],"uv":[0,360,336,360,0,0,336,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-168,"y":-180,"z":0},"maxPos":{"x":168,"y":180,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[36]],[[{"name":"ton_icon","rect":{"x":0,"y":0,"width":81,"height":81},"offset":{"x":0,"y":0},"originalSize":{"width":81,"height":81},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40.5,-40.5,0,40.5,-40.5,0,-40.5,40.5,0,40.5,40.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,81,81,81,0,0,81,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40.5,"y":-40.5,"z":0},"maxPos":{"x":40.5,"y":40.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[37]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"99GufIjMFH3bIZDIIlGEPG@b47c0@e9a6d","back":"99GufIjMFH3bIZDIIlGEPG@b47c0@40c10","left":"99GufIjMFH3bIZDIIlGEPG@b47c0@8fd34","right":"99GufIjMFH3bIZDIIlGEPG@b47c0@74afd","top":"99GufIjMFH3bIZDIIlGEPG@b47c0@bb97f","bottom":"99GufIjMFH3bIZDIIlGEPG@b47c0@7d38f"}]}],[10],0,[],[],[]],[[{"fmt":"2","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"2","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"2","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"2","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"2","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"2","w":0,"h":0},-1],[2],0,[],[],[]],[[{"name":"telegram_star","rect":{"x":0,"y":0,"width":69,"height":66},"offset":{"x":-0.5,"y":0},"originalSize":{"width":70,"height":66},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-34.5,-33,0,34.5,-33,0,-34.5,33,0,34.5,33,0],"indexes":[0,1,2,2,1,3],"uv":[0,66,69,66,0,0,69,0],"nuv":[0,0,0.9857142857142858,0,0,1,0.9857142857142858,1],"minPos":{"x":-34.5,"y":-33,"z":0},"maxPos":{"x":34.5,"y":33,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[38]],[[{"name":"booster_timer_circle_bg","rect":{"x":0,"y":0,"width":162,"height":162},"offset":{"x":0,"y":0},"originalSize":{"width":162,"height":162},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-81,-81,0,81,-81,0,-81,81,0,81,81,0],"indexes":[0,1,2,2,1,3],"uv":[0,162,162,162,0,0,162,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-81,"y":-81,"z":0},"maxPos":{"x":81,"y":81,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[39]],[[[124,"skybox_1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{}],[[[{},"environmentMap",6,0],{}],11,0]]],0,0,[0,0],[23,24],[14,40]],[[{"name":"default_scrollbar_vertical","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"vertices":{"rawPosition":[-7.5,-15,0,7.5,-15,0,-7.5,15,0,7.5,15,0],"indexes":[0,1,2,2,1,3],"uv":[0,30,15,30,0,0,15,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-7.5,"y":-15,"z":0},"maxPos":{"x":7.5,"y":15,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[41]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"vertices":{"rawPosition":[-10,-10,0,10,-10,0,-10,10,0,10,10,0],"indexes":[0,1,2,2,1,3],"uv":[0,20,20,20,0,0,20,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-10,"y":-10,"z":0},"maxPos":{"x":10,"y":10,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[42]],[[{"name":"gradient_shadow","rect":{"x":0,"y":0,"width":30,"height":408},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":408},"rotated":false,"capInsets":[12,0,12,0],"vertices":{"rawPosition":[-15,-204,0,15,-204,0,-15,204,0,15,204,0],"indexes":[0,1,2,2,1,3],"uv":[0,408,30,408,0,0,30,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15,"y":-204,"z":0},"maxPos":{"x":15,"y":204,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[43]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"bbsbOtBPBJmYCRJXI6SyVO@b47c0@e9a6d","back":"bbsbOtBPBJmYCRJXI6SyVO@b47c0@40c10","left":"bbsbOtBPBJmYCRJXI6SyVO@b47c0@8fd34","right":"bbsbOtBPBJmYCRJXI6SyVO@b47c0@74afd","top":"bbsbOtBPBJmYCRJXI6SyVO@b47c0@bb97f","bottom":"bbsbOtBPBJmYCRJXI6SyVO@b47c0@7d38f"}]}],[10],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"name":"panel_sprite","rect":{"x":0,"y":0,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[70,70,70,70],"vertices":{"rawPosition":[-75,-75,0,75,-75,0,-75,75,0,75,75,0],"indexes":[0,1,2,2,1,3],"uv":[0,150,150,150,0,0,150,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-75,"y":-75,"z":0},"maxPos":{"x":75,"y":75,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[44]],[[{"name":"mini_wallet_icon","rect":{"x":0,"y":0,"width":32,"height":28},"offset":{"x":-0.5,"y":0},"originalSize":{"width":33,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-16,-14,0,16,-14,0,-16,14,0,16,14,0],"indexes":[0,1,2,2,1,3],"uv":[0,28,32,28,0,0,32,0],"nuv":[0,0,0.9696969696969697,0,0,1,0.9696969696969697,1],"minPos":{"x":-16,"y":-14,"z":0},"maxPos":{"x":16,"y":14,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[45]],[[{"name":"green_btn","rect":{"x":0,"y":0,"width":219,"height":162},"offset":{"x":0,"y":0},"originalSize":{"width":219,"height":162},"rotated":false,"capInsets":[97,0,107,0],"vertices":{"rawPosition":[-109.5,-81,0,109.5,-81,0,-109.5,81,0,109.5,81,0],"indexes":[0,1,2,2,1,3],"uv":[0,162,219,162,0,0,219,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-109.5,"y":-81,"z":0},"maxPos":{"x":109.5,"y":81,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[46]],[[{"name":"purple_btn","rect":{"x":0,"y":0,"width":312,"height":132},"offset":{"x":0,"y":0},"originalSize":{"width":312,"height":132},"rotated":false,"capInsets":[45,32,42,37],"vertices":{"rawPosition":[-156,-66,0,156,-66,0,-156,66,0,156,66,0],"indexes":[0,1,2,2,1,3],"uv":[0,132,312,132,0,0,312,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-156,"y":-66,"z":0},"maxPos":{"x":156,"y":66,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[47]],[[{"name":"default_scrollbar_vertical_bg","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"vertices":{"rawPosition":[-7.5,-15,0,7.5,-15,0,-7.5,15,0,7.5,15,0],"indexes":[0,1,2,2,1,3],"uv":[0,30,15,30,0,0,15,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-7.5,"y":-15,"z":0},"maxPos":{"x":7.5,"y":15,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[48]]]]
